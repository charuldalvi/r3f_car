/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import * as THREE from 'three'
import { FlakesTexture } from 'three/examples/jsm/textures/FlakesTexture.js'
import {
  Lensflare,
  LensflareElement,
} from 'three/examples/jsm/objects/Lensflare.js'
import {
  useGLTF,
  useTexture,
  useHelper,
  shaderMaterial,
  Html,
} from '@react-three/drei'
import { extend, useFrame, useThree } from '@react-three/fiber'
import {
  EffectComposer,
  SelectiveBloom,
  SSAO,
  BrightnessContrast,
  HueSaturation,
  Bloom,
} from '@react-three/postprocessing'
import { KernelSize, Resizer } from 'postprocessing'
import { useSpring, a } from '@react-spring/web'
import { a as a3f } from '@react-spring/three'
import { useDrag } from '@use-gesture/react'
import { useStore } from './stateManagement'
import gsap from 'gsap'

// Assets
import logo from './assets/BMWLogo.jpg'
import mirrorEmissive from './assets/Mirror_Plastic_Emissive.jpeg'
import flareFront from './assets/flare-long.png'
import flareBack from './assets/flare-red_new.png'

// Let's make the marker into a component so that we can abstract some shared logic
function Marker({ children, ...props }) {
  // This holds the visible state
  const [hidden, set] = useState()
  return (
    <Html
      distanceFactor={8}
      occlude
      // The <Html> component can tell us when something is occluded (or not)
      onOcclude={set}
      style={{
        transition: 'all 0.2s',
        opacity: hidden ? 0 : 1,
        transform: `scale(${hidden ? 0.25 : 1})`,
      }}
      {...props}
    >
      {children}
    </Html>
  )
}

export default function Model({ metalness, roughness, props }) {
  const group = useRef()
  const steeringRef = useRef()
  const frontLeftTire = useRef()
  const backLeftTire = useRef()
  const frontRightTire = useRef()
  const backRightTire = useRef()
  const leftDoor = useRef()
  const pointLight = useRef()
  const rightFrontPointLight = useRef()
  const leftBackPointLight = useRef()
  const rightBackPointLight = useRef()
  const directionalRef = useRef()
  const led = useRef()
  const backLight = useRef()
  const leftDoorOuter = useRef()
  const rightDoorOuter = useRef()
  const bodyOuter = useRef()

  const [isHovered, setHoveredState] = useState(false)
  const { viewport } = useThree()
  const { width, height, factor } = viewport
  const [spring, setSpring] = useSpring(() => ({
    rotation: [0, 0, 0],
  }))

  // Set the drag hook and define component movement based on gesture data
  const bind = useDrag(
    ({ offset: [x, y], _preventScroll }) => setSpring({ rotation: [x, 0, 0] }),
    {
      // bounds are expressed in canvas coordinates!
      bounds: {
        left: -width / 2,
        right: width / 2,
        top: -height / 2,
        bottom: height / 2,
      },
      rubberband: true,
      transform: ([x, y]) => [x / factor, 0],
    }
  )

  // LensFlare Declarations
  let frontLeftLensflare = new Lensflare()
  let frontRightLensflare = new Lensflare()
  let backLeftLensflare = new Lensflare()
  let backRightLensflare = new Lensflare()

  const { nodes, materials } = useGLTF('/src/bmw_i8_v2.glb')

  const { camera, scene, gl } = useThree()

  gl.toneMapping = THREE.ACESFilmicToneMapping

  const isInteriorClicked = useStore((state) => state.isInteriorClicked)
  const setIsInteriorClicked = useStore((state) => state.setIsInteriorClicked)
  const isCameraInside = useStore((state) => state.isCameraInside)
  const primaryColor = useStore((state) => state.primaryColor)
  const secondaryColor = useStore((state) => state.secondaryColor)
  const interiorPrimaryColor = useStore((state) => state.interiorPrimaryColor)
  const interiorSecondaryColor = useStore(
    (state) => state.interiorSecondaryColor
  )

  let gsap_tl = gsap.timeline()

  useEffect(() => {
    if (isInteriorClicked == true && isCameraInside == false) {
      gsap_tl
        .to(leftDoor.current.rotation, {
          x: -1.7446311,
          y: -0.8133234,
          z: -0.5077163,
          ease: 'Power4.out',
          duration: 1,
        })
        .to(leftDoor.current.rotation, {
          x: 0,
          y: 0,
          z: 0,
          ease: 'Power4.in',
          duration: 1,
          delay: 1.5,
        })
    } else if (isInteriorClicked == false && isCameraInside == true) {
      gsap_tl
        .to(leftDoor.current.rotation, {
          x: -1.7446311,
          y: -0.8133234,
          z: -0.5077163,
          ease: 'Power4.out',
          duration: 1,
        })
        .to(leftDoor.current.rotation, {
          x: 0,
          y: 0,
          z: 0,
          ease: 'Power4.in',
          duration: 1,
          delay: 1.2,
        })
    }
  }, [isInteriorClicked, leftDoor.current])

  useEffect(() => {
    const color = new THREE.Color(`#${primaryColor}`)
    console.log(leftDoorOuter.current)
    gsap.to(leftDoorOuter.current.material.color, {
      color: color,
      duration: 1,
      ease: 'Power4.in',
    })
    gsap.to(rightDoorOuter.current.material.color, {
      color: color,
      duration: 1,
      ease: 'Power4.in',
    })
    gsap.to(bodyOuter.current.material.color, {
      color: color,
      duration: 1,
      ease: 'Power4.in',
    })
  }, [primaryColor, leftDoorOuter.current])

  useFrame(() => {
    frontLeftTire.current.rotation.z += 0.05
    backLeftTire.current.rotation.z += 0.05
    frontRightTire.current.rotation.z += 0.05
    backRightTire.current.rotation.z += 0.05
    // steeringRef.current.rotation.x -= 0.01
  })

  // Flake Map
  const flakeMap = new THREE.CanvasTexture(new FlakesTexture())
  flakeMap.wrapS = THREE.RepeatWrapping
  flakeMap.wrapT = THREE.RepeatWrapping
  flakeMap.repeat.x = 40
  flakeMap.repeat.y = 40
  flakeMap.generateMipmaps = true
  flakeMap.minFilter = THREE.NearestMipMapLinearFilter
  flakeMap.anisotropy = 30

  // Node Material

  // Logo
  const logoMap = useTexture(logo)

  // Exterior Textures
  const mirrorMap = useTexture(mirrorEmissive)
  const textureFlare0 = useTexture(flareFront)
  const textureFlare3 = useTexture(flareBack)

  let frontLensFlareSize = 600

  // Lens Flare
  useEffect(() => {
    frontLeftLensflare.addElement(
      new LensflareElement(textureFlare0, frontLensFlareSize, 0)
    )

    isInteriorClicked === true
      ? pointLight.current.remove(frontLeftLensflare)
      : pointLight.current.add(frontLeftLensflare)

    frontRightLensflare.addElement(
      new LensflareElement(textureFlare0, frontLensFlareSize, 0)
    )

    isInteriorClicked === true
      ? rightFrontPointLight.current.remove(frontRightLensflare)
      : rightFrontPointLight.current.add(frontRightLensflare)

    backLeftLensflare.addElement(new LensflareElement(textureFlare3, 200, 0))

    isInteriorClicked === true
      ? leftBackPointLight.current.remove(backLeftLensflare)
      : leftBackPointLight.current.add(backLeftLensflare)

    backRightLensflare.addElement(new LensflareElement(textureFlare3, 200, 0))

    isInteriorClicked === true
      ? rightBackPointLight.current.remove(backRightLensflare)
      : rightBackPointLight.current.add(backRightLensflare)
  }, [])

  const bloom = useRef()

  useFrame(({ camera }) => {
    bloom.current.ignoreBackground = true
  })

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      position={[0, -0.004, isInteriorClicked === true ? 0.1 : 0]}
      rotation={[0, Math.PI, 0]}
    >
      <group scale={0.2}>
        <group ref={steeringRef} {...bind()} position={[-6.01, 8.6, 4.52]}>
          <group position={[6.01, -8.6, -4.52]}>
            <a3f.mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_Stering_geoShape.geometry}
              material={materials.wire_028028177}
            >
              <meshPhysicalMaterial
                color={`#${secondaryColor}`}
                reflectivity={0.2}
                roughness={0.1}
                metalness={0.3}
              />
            </a3f.mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_Stering_geoShape_4.geometry}
              material={materials.Plastic_Metal}
            />
            <a3f.mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_Stering_geoShape_2.geometry}
              material={materials.SteeringWheel}
              material-roughness={0.6}
            >
              {/* <Marker {...bind()} position={[-4, 11, 4]}>
                <a.div
                  {...bind()}
                  style={{
                    width: '5px',
                    height: '5px',
                    background: isHovered === true ? 'white' : ' ',
                    outline: '0.5px solid #fff',
                    outlineOffset: '2px',
                    transform: 'rotate(45deg)',
                    cursor: 'pointer',
                    x,
                    y,
                  }}
                ></a.div>
              </Marker> */}
              <axesHelper />
            </a3f.mesh>
            <a3f.mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_Stering_geoShape_6.geometry}
              material={materials.Black_Controls}
            />
            <a3f.mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_Stering_geoShape_7.geometry}
              material={nodes.bmw_Stering_geoShape_7.material}
            >
              <meshPhysicalMaterial
                color={`#${secondaryColor}`}
                reflectivity={0.2}
                roughness={0.1}
                metalness={0.3}
              />
            </a3f.mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_Stering_geoShape_3.geometry}
              material={materials.SteeringWheel2}
              material-roughness={0.5}
            />
            <a3f.mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_Stering_geoShape_1.geometry}
              material={nodes.bmw_Stering_geoShape_1.material}
            />
            <a3f.mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_Stering_geoShape_5.geometry}
              material={nodes.bmw_Stering_geoShape_5.material}
            />
          </group>
        </group>
        <group position={[-23.61, 7.11, -0.01]}>
          <mesh
            geometry={nodes.FrontBmwLogoPIV.geometry}
            material={nodes.FrontBmwLogoPIV.material}
            position={[23.61, -7.11, 0.01]}
          >
            <meshPhysicalMaterial map={logoMap} map-flipY={false} />
          </mesh>
        </group>
        <group position={[24.5, 8.83, 0]}>
          <mesh
            geometry={nodes.BackBmwLogoPIV.geometry}
            material={nodes.BackBmwLogoPIV.material}
            position={[-24.5, -8.83, 0]}
          />
        </group>
        <group position={[1.83, 3.93, 0]}>
          <group position={[-1.83, -3.93, 0]}>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={0.4}
              geometry={nodes.BreakCalipar_geoShape.geometry}
              material={materials.Calipar_White_Material}
            >
              <meshPhysicalMaterial color={'#000000'} metalness={1} />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={0.4}
              geometry={nodes.BreakCalipar_geoShape_1.geometry}
              material={materials.Rim_Metal}
            ></mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={0.4}
              geometry={nodes.BreakCalipar_geoShape_2.geometry}
              material={materials.Wheel_Tubes}
            >
              <meshPhysicalMaterial
                color={`#${secondaryColor}`}
                metalness={0.3}
                opacity={1}
              />
            </mesh>
          </group>
        </group>
        <group ref={backLeftTire} position={[15.16, 3.98, 9.23]}>
          <group position={[-15.16, -3.98, -9.23]}>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftBackWheel_geoShape_1.geometry}
              material={nodes.bmw_LeftBackWheel_geoShape_1.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftBackWheel_geoShape_2.geometry}
              material={nodes.bmw_LeftBackWheel_geoShape_2.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftBackWheel_geoShape_3.geometry}
              material={nodes.bmw_LeftBackWheel_geoShape_3.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftBackWheel_geoShape_4.geometry}
              material={nodes.bmw_LeftBackWheel_geoShape_4.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftBackWheel_geoShape_5.geometry}
              material={nodes.bmw_LeftBackWheel_geoShape_5.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftBackWheel_geoShape_6.geometry}
              material={nodes.bmw_LeftBackWheel_geoShape_6.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftBackWheel_geoShape_7.geometry}
              material={nodes.bmw_LeftBackWheel_geoShape_7.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftBackWheel_geoShape.geometry}
              material={nodes.bmw_LeftBackWheel_geoShape.material}
            />
          </group>
        </group>
        <group ref={frontLeftTire} position={[-14.46, 3.98, 8.45]}>
          <group position={[14.46, -3.98, -8.45]}>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftFrontWheel_geoShape.geometry}
              material={nodes.bmw_LeftFrontWheel_geoShape.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftFrontWheel_geoShape_2.geometry}
              material={nodes.bmw_LeftFrontWheel_geoShape_2.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftFrontWheel_geoShape_3.geometry}
              material={nodes.bmw_LeftFrontWheel_geoShape_3.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftFrontWheel_geoShape_7.geometry}
              material={nodes.bmw_LeftFrontWheel_geoShape_7.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftFrontWheel_geoShape_5.geometry}
              material={nodes.bmw_LeftFrontWheel_geoShape_5.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftFrontWheel_geoShape_6.geometry}
              material={nodes.bmw_LeftFrontWheel_geoShape_6.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftFrontWheel_geoShape_1.geometry}
              material={nodes.bmw_LeftFrontWheel_geoShape_1.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_LeftFrontWheel_geoShape_4.geometry}
              material={nodes.bmw_LeftFrontWheel_geoShape_4.material}
            />
          </group>
        </group>
        <group ref={backRightTire} position={[15.16, 3.97, -9.24]}>
          <group position={[-15.16, -3.97, 9.24]}>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightBackWheel_geoShape.geometry}
              material={nodes.bmw_RightBackWheel_geoShape.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightBackWheel_geoShape_1.geometry}
              material={nodes.bmw_RightBackWheel_geoShape_1.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightBackWheel_geoShape_2.geometry}
              material={nodes.bmw_RightBackWheel_geoShape_2.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightBackWheel_geoShape_3.geometry}
              material={nodes.bmw_RightBackWheel_geoShape_3.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightBackWheel_geoShape_4.geometry}
              material={nodes.bmw_RightBackWheel_geoShape_4.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightBackWheel_geoShape_5.geometry}
              material={nodes.bmw_RightBackWheel_geoShape_5.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightBackWheel_geoShape_6.geometry}
              material={nodes.bmw_RightBackWheel_geoShape_6.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightBackWheel_geoShape_7.geometry}
              material={nodes.bmw_RightBackWheel_geoShape_7.material}
            />
          </group>
        </group>
        <group ref={frontRightTire} position={[-14.46, 3.98, -8.48]}>
          <group position={[14.46, -3.98, 8.48]}>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightFrontWheel_geoShape_1.geometry}
              material={nodes.bmw_RightFrontWheel_geoShape_1.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightFrontWheel_geoShape_5.geometry}
              material={nodes.bmw_RightFrontWheel_geoShape_5.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightFrontWheel_geoShape.geometry}
              material={nodes.bmw_RightFrontWheel_geoShape.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightFrontWheel_geoShape_2.geometry}
              material={nodes.bmw_RightFrontWheel_geoShape_2.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightFrontWheel_geoShape_4.geometry}
              material={nodes.bmw_RightFrontWheel_geoShape_4.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightFrontWheel_geoShape_3.geometry}
              material={nodes.bmw_RightFrontWheel_geoShape_3.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightFrontWheel_geoShape_6.geometry}
              material={nodes.bmw_RightFrontWheel_geoShape_6.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.bmw_RightFrontWheel_geoShape_7.geometry}
              material={nodes.bmw_RightFrontWheel_geoShape_7.material}
            />
          </group>
        </group>
        <group ref={leftDoor} position={[-9.79, 8.52, 9.13]}>
          <group position={[9.79, -8.52, -9.13]}>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_6.geometry}
              material={materials.Black_Shine3}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_9.geometry}
              material={materials.Leather_General_Red3}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_10.geometry}
              material={materials.Black_Controls3}
            >
              <meshPhysicalMaterial color={'#000000'} />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_12.geometry}
              material={materials.AllLigths_Inside3}
            />
            <mesh
              ref={leftDoorOuter}
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_13.geometry}
              material={materials.FBXASC0481_CAR_COPPER_COLOR3}
            >
              <meshPhysicalMaterial
                color={`#${primaryColor}`}
                metalness={metalness}
                roughness={roughness}
                clearcoatRoughness={0.1}
                clearcoat={1}
                envMapIntensity={0.82}
                normalMap={flakeMap}
                normalScale={[0.03, 0.03]}
                reflectivity={1}
                sheen={new THREE.Color(10, 10, 10)}
                sheenBRDF={true}
              />
              {/* <Marker position={[7, 9, 10]}>
              <div
                onMouseOver={() => {
                  setHoveredState(true);
                }}
                onMouseOut={() => {
                  setHoveredState(false);
                }}
                onClick={() => {
                  setIsInteriorClicked();
                }}
                style={{
                  width: "15px",
                  height: "15px",
                  background: isHovered === true ? "white" : " ",
                  outline: "0.5px solid #fff",
                  outlineOffset: "2px",
                  transform: "rotate(45deg)",
                  cursor: "pointer",
                }}
              ></div>
            </Marker> */}
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape.geometry}
              material={materials.Glass_Windows2}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_1.geometry}
              material={nodes.LeftDoor_geoShape_1.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_2.geometry}
              material={nodes.LeftDoor_geoShape_2.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_3.geometry}
              material={materials.SoundDevice3}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_4.geometry}
              material={materials.Upholstery3}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_5.geometry}
              material={materials.Plain_Leather3}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_7.geometry}
              material={nodes.LeftDoor_geoShape_7.material}
            >
              <meshPhysicalMaterial
                color={`#${secondaryColor}`}
                reflectivity={0.2}
                roughness={0.1}
                metalness={0.3}
              />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_8.geometry}
              material={materials.Grey_Plastic_Shine3}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.LeftDoor_geoShape_11.geometry}
              material={nodes.LeftDoor_geoShape_11.material}
            />
          </group>
        </group>
        <group position={[0.26, 7.77, -0.5]}>
          <group position={[-0.26, -7.77, 0.5]}>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_8.geometry}
              material={materials.Rubber_Black4}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_9.geometry}
              material={materials.Seats_Leather1}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.BmwBody_geoShape_10.geometry}
              material={materials.wire_087224198}
              material-metalness={0.8}
              material-roughness={1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_11.geometry}
              material={materials.Logo_Aluminium1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_12.geometry}
              material={materials.Upholstery4}
            >
              <meshPhysicalMaterial color={`#${interiorPrimaryColor}`} />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_13.geometry}
              material={materials.Plastic_Grey_Chrome1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_14.geometry}
              material={materials.Standard_17}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_15.geometry}
              material={materials.Plain_Leather5}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_16.geometry}
              material={materials.MULTI_Green_Led2}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_17.geometry}
              material={materials.MULTI_Green_Led}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_18.geometry}
              material={materials.Plastic_Glass_Lines_Bend1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_19.geometry}
              material={materials.Plastic_Glass1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_20.geometry}
              material={materials.Logo_Chromo_Satin1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_21.geometry}
              material={materials.Inside_Led_TailLight1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_22.geometry}
              material={materials.Inside_Front_Light_Metal1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_23.geometry}
              material={materials.TopControls1}
            >
              <meshPhysicalMaterial color={`#${interiorPrimaryColor}`} />
            </mesh>

            <mesh
              ref={backLight}
              geometry={nodes.BmwBody_geoShape_24.geometry}
              material={materials.Inside_BackLights1}
            >
              <meshPhysicalMaterial
                color={0xff0000}
                emissive={0xff0000}
                emissiveIntensity={10}
              />
            </mesh>

            {/* <mesh
              geometry={nodes.BmwBody_geoShape_24.geometry}
              material={materials.Inside_BackLights1}
              scale={[1.02, 1.02, 1.02]}
            >
             <shaderMaterial
                vertexShader={`
                varying vec3 vNormal;
                
                void main() {

                    vNormal = normal;
                
                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
                }
                `}
                fragmentShader={`
                
                varying vec3 vNormal;

                void main() {

                  float intensity = pow(1.2 - dot(vNormal, vec3(0, 0, 1.0)), 6.0);

                  gl_FragColor = vec4(0.3, 0.0, 0.0, 1.0) * intensity;
                }
  
                `}
                blending={THREE.AdditiveBlending}
                side={THREE.BackSide}
                transparent={true}
              />
            </mesh> */}
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_25.geometry}
              material={materials.Leather_General_Red5}
            />
            <mesh
              ref={led}
              geometry={nodes.BmwBody_geoShape_26.geometry}
              material={materials.Laser_Inside_Bend_Plastic1}
              position={[0, 0.05, 0]}
            >
              <meshPhysicalMaterial
                color={0xffffff}
                emissive={0xffffff}
                emissiveIntensity={1}
              />
            </mesh>
            {/* <mesh
              ref={led}
              geometry={nodes.BmwBody_geoShape_26.geometry}
              material={materials.Laser_Inside_Bend_Plastic1}
              scale={[1.02, 1.02, 1.02]}
              position={[0,0,0]}
              
            >
              <shaderMaterial
                vertexShader={`
                varying vec3 vNormal;
                
                void main() {

                    vNormal = normalize(normalMatrix * normal);
                
                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
                }
                `}
                fragmentShader={`
                
                varying vec3 vNormal;

                void main() {

                  float intensity = pow(0.8 - dot(vNormal, vec3(0, 0, 1.0)), 6.0);

                  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0) * intensity;
                }
  
                `}
                blending={THREE.AdditiveBlending}
                side={THREE.BackSide}
              />
            </mesh> */}
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_2.geometry}
              material={materials.Roof_Material1}
            >
              <meshPhysicalMaterial color={`#${interiorPrimaryColor}`} />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_3.geometry}
              material={materials.Seal_Grey1}
            >
              <meshPhysicalMaterial color={`#${interiorPrimaryColor}`} />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_4.geometry}
              material={nodes.BmwBody_geoShape_4.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_5.geometry}
              material={nodes.BmwBody_geoShape_5.material}
            >
              <meshPhysicalMaterial
                color={`#${secondaryColor}`}
                emissive={`#${secondaryColor}`}
                emissiveIntensity={0.3}
                metalness={metalness}
                roughness={roughness}
                clearcoatRoughness={0.1}
                clearcoat={1}
                envMapIntensity={0.8}
                normalMap={flakeMap}
                normalScale={[0.02, 0.02]}
              />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_27.geometry}
              material={materials.Head_Seat_Fabric1}
            >
              <meshStandardMaterial color={`#${interiorSecondaryColor}`} />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_6.geometry}
              material={materials.E_Logo_Metal1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_42.geometry}
              material={materials.Plastico_Azul1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_44.geometry}
              material={materials.Glass_BackLigh_Stops1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_45.geometry}
              material={materials.Carpet_Outline1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_7.geometry}
              material={materials.BackSeats1}
            >
              <meshPhysicalMaterial color={`#${interiorPrimaryColor}`} />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_28.geometry}
              material={materials.HeadLight_Metal1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_29.geometry}
              material={materials.Panel_Led1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_1.geometry}
              material={materials.Leather_Sewing1}
            >
              <meshPhysicalMaterial
                color={`#${interiorPrimaryColor}`}
                envMapIntensity={0.6}
              />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_58.geometry}
              material={materials.AllLigths_Inside_Red1}
              material-emissive={'#282828'}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_30.geometry}
              material={materials.Carpet1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_59.geometry}
              material={materials.wire_143225092}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_65.geometry}
              material={materials.Light_Rear1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_31.geometry}
              material={materials.Full_Black1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_32.geometry}
              material={materials.Plastic_Blue1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_66.geometry}
              material={materials.Carbon_Fiber1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_69.geometry}
              material={materials.Plain_Leather4}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_70.geometry}
              material={materials.Leather_General_Red4}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_46.geometry}
              material={materials.Black_Shine5}
            >
              <meshPhysicalMaterial
                color={'#000000'}
                metalness={0.9}
                roughness={0.6}
                clearcoatRoughness={0.12}
                clearcoat={1}
                envMapIntensity={0.8}
                normalMap={flakeMap}
                normalScale={[0.02, 0.02]}
              />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_33.geometry}
              material={materials.Glass_Bulb_Lights1}
            ></mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_71.geometry}
              material={materials.Upholstery5}
              material-color={`#${interiorPrimaryColor}`}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_89.geometry}
              material={nodes.BmwBody_geoShape_89.material}
            >
              <meshPhysicalMaterial
                color={`#${secondaryColor}`}
                emissive={`#${secondaryColor}`}
                emissiveIntensity={0.3}
                metalness={metalness}
                roughness={roughness}
                clearcoatRoughness={0.1}
                clearcoat={1}
                envMapIntensity={0.8}
                normalMap={flakeMap}
                normalScale={[0.02, 0.02]}
              />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_90.geometry}
              material={materials.Grey_Normal1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_92.geometry}
              material={nodes.BmwBody_geoShape_92.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_93.geometry}
              material={materials.Display_Panel1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_94.geometry}
              material={materials.aiStandardSurface2}
            >
              <meshPhysicalMaterial
                map={mirrorMap}
                map-flipY={false}
                map-flipZ={false}
                metalness={metalness}
                roughness={roughness}
              />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_48.geometry}
              material={materials.Black_Controls6}
            />
            <mesh
              ref={rightDoorOuter}
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_95.geometry}
              material={materials.FBXASC0481_CAR_COPPER_COLOR4}
            >
              <meshPhysicalMaterial
                color={`#${primaryColor}`}
                metalness={metalness}
                roughness={roughness}
                clearcoatRoughness={0.1}
                clearcoat={1}
                envMapIntensity={0.8}
                normalMap={flakeMap}
                normalScale={[0.03, 0.03]}
                reflectivity={1}
                sheen={new THREE.Color(10, 10, 10)}
                sheenBRDF={true}
              />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_49.geometry}
              material={materials.Aluminum_Master1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_51.geometry}
              material={materials.BackLight_Rear1}
            />
            <mesh
              ref={backLight}
              castShadow
              receiveShadow
              geometry={nodes.BmwBody_geoShape_52.geometry}
              material={materials.Back_Red_Light_BackGround1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_53.geometry}
              material={materials.Back_Led_Down1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_34.geometry}
              material={materials.Grey_Plastic_Shine6}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_35.geometry}
              material={materials.Leather_Beige1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_36.geometry}
              material={nodes.BmwBody_geoShape_36.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_55.geometry}
              material={materials.BackLight_Plastic1}
            ></mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_37.geometry}
              material={materials.LogoFrontBackStering_mat}
            />
            <mesh
              ref={bodyOuter}
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape.geometry}
              material={nodes.BmwBody_geoShape.material}
            >
              <meshPhysicalMaterial
                color={`#${primaryColor}`}
                metalness={metalness}
                roughness={roughness}
                clearcoatRoughness={0.1}
                clearcoat={1}
                envMapIntensity={0.82}
                normalMap={flakeMap}
                normalScale={[0.03, 0.03]}
                reflectivity={1}
                sheen={new THREE.Color(10, 10, 10)}
                sheenBRDF={true}
              />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_61.geometry}
              material={materials.RoofLight1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_63.geometry}
              material={materials.PRotonicFinal1}
            >
              <meshPhysicalMaterial
                color={`#${secondaryColor}`}
                emissive={`#${secondaryColor}`}
                emissiveIntensity={0.3}
                metalness={metalness}
                roughness={roughness}
                clearcoatRoughness={0.1}
                clearcoat={1}
                envMapIntensity={0.8}
                normalMap={flakeMap}
                normalScale={[0.02, 0.02]}
              />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_67.geometry}
              material={materials.UpMirror}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_38.geometry}
              material={materials.Plastic_Metal1}
              material-metalness={0.8}
              material-roughness={0.5}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_68.geometry}
              material={materials.SoundDevice5}
              material-color={`#${interiorPrimaryColor}`}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_39.geometry}
              material={materials.E_Logo1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_78.geometry}
              material={materials.Black_Shine4}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_82.geometry}
              material={nodes.BmwBody_geoShape_82.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_40.geometry}
              material={materials.Glass_Windows}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_84.geometry}
              material={materials.MULTI_Green_Led1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_85.geometry}
              material={materials.Panel_Led2}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_41.geometry}
              material={materials.Glass_Lines_Back}
            >
              <shaderMaterial
                vertexShader={`
                varying vec3 vNormal;
                
                void main() {

                    vNormal = normalize(normalMatrix * normal);
                
                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
                }
                `}
                fragmentShader={`
                
                varying vec3 vNormal;

                void main() {


                  gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
                }
  
                `}
                blending={THREE.AdditiveBlending}
                side={THREE.BackSide}
              />
            </mesh>
            {/* <mesh
              ref={led}
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_41.geometry}
              material={materials.Glass_Lines_Back}
              scale={[1.001, 1.001, 1.001]}
            >
              <shaderMaterial
                vertexShader={`
                varying vec3 vNormal;
                
                void main() {

                    vNormal = normalize(normalMatrix * normal);
                
                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
                }
                `}
                fragmentShader={`
                
                varying vec3 vNormal;

                void main() {

                  float intensity = pow(2.6 - dot(vNormal, vec3(0, 0, 1.0)), 2.0);

                  gl_FragColor = vec4(0.4, 0.0, 0.0, 1.0) * intensity;
                }
  
                `}
                blending={THREE.AdditiveBlending}
                side={THREE.BackSide}
              />
            </mesh> */}
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_43.geometry}
              material={materials.Belt1}
            >
              <meshPhysicalMaterial color={`#${secondaryColor}`} />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_86.geometry}
              material={materials.Grey_Plastic_Shine5}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_88.geometry}
              material={materials.Controls4}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_91.geometry}
              material={nodes.BmwBody_geoShape_91.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_96.geometry}
              material={nodes.BmwBody_geoShape_96.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.RightDoorButton_geo.geometry}
              material={nodes.RightDoorButton_geo.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_97.geometry}
              material={materials.Display_GPS1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_47.geometry}
              material={nodes.BmwBody_geoShape_47.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_50.geometry}
              material={materials.Black_Parts1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_54.geometry}
              material={materials.Belt_Metal_Click1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_56.geometry}
              material={materials.AllLigths_Inside5}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_57.geometry}
              material={materials.FBXASC0482_CAR_BLACK_COLOR1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_60.geometry}
              material={materials.Roof_Light_Glass1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_62.geometry}
              material={materials.Protonic1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_64.geometry}
              material={materials.Middle_Back_Led1}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_72.geometry}
              material={materials.SoundDevice4}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_73.geometry}
              material={materials.Grey_Plastic_Shine4}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_74.geometry}
              material={nodes.BmwBody_geoShape_74.material}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_75.geometry}
              material={materials.AllLigths_Inside4}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_76.geometry}
              material={materials.wire_143225089}
            >
              <meshPhysicalMaterial
                color={`#${secondaryColor}`}
                reflectivity={0.2}
                roughness={0.1}
                metalness={0.3}
              />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_77.geometry}
              material={materials.Rubber_Black3}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_79.geometry}
              material={materials.Glass_Windows3}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_80.geometry}
              material={materials.Black_Controls5}
            />
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_81.geometry}
              material={materials.wire_143225091}
            >
              <meshPhysicalMaterial
                color={`#${secondaryColor}`}
                reflectivity={0.2}
                roughness={0.1}
                metalness={0.3}
              />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_83.geometry}
              material={materials.wire_143225090}
            >
              <meshPhysicalMaterial
                color={`#${secondaryColor}`}
                reflectivity={0.2}
                roughness={0.1}
                metalness={0.3}
              />
            </mesh>
            <mesh
              castShadow
              receiveShadow
              material-envMapIntensity={5}
              geometry={nodes.BmwBody_geoShape_87.geometry}
              material={nodes.BmwBody_geoShape_87.material}
            />
          </group>
        </group>
      </group>
      {/* <directionalLight
        ref={directionalRef}
        intensity={0.005}
        position={[20, 5, 60]}
      /> */}
      <pointLight
        intensity={0.3}
        decay={3}
        distance={15}
        position={[-0.2, 2, 0]}
      />
      <pointLight
        ref={pointLight}
        layers={11}
        castShadow
        intensity={0.001}
        position={[-4.25, 1.24, 1.45]}
      />
      <pointLight
        ref={rightFrontPointLight}
        layers={11}
        castShadow
        intensity={0.005}
        position={[-4.25, 1.24, -1.45]}
      />
      <pointLight
        ref={leftBackPointLight}
        layers={11}
        castShadow
        intensity={0.005}
        position={[4.36, 1.78, 1.25]}
      />
      <pointLight
        ref={rightBackPointLight}
        layers={11}
        castShadow
        intensity={0.005}
        position={[4.36, 1.78, -1.25]}
      />

      <EffectComposer frameBufferType={THREE.HalfFloatType}>
        <SelectiveBloom
          ref={bloom}
          lights={[
            pointLight,
            rightFrontPointLight,
            leftBackPointLight,
            rightBackPointLight,
          ]} // ⚠️ REQUIRED! all relevant lights
          selection={[led, backLight]} // selection of objects that will have bloom effect
          selectionLayer={10} // selection layer
          intensity={15.0} // The bloom intensity.
          blurPass={undefined} // A blur pass.
          width={Resizer.AUTO_SIZE} // render width
          height={Resizer.AUTO_SIZE} // render height
          kernelSize={KernelSize.LARGE} // blur kernel size
          luminanceThreshold={0.75} // luminance threshold. Raise this value to mask out darker elements in the scene.
          luminanceSmoothing={1} // smoothness of the luminance threshold. Range is [0, 1]
        />
        <BrightnessContrast
          brightness={0} // brightness. min: -1, max: 1
          contrast={0.005} // contrast: min -1, max: 1
        />
      </EffectComposer>
    </group>
  )
}

useGLTF.preload('/src/bmw_i8_v2.glb')
